<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java Kotlin</title>
      <link href="/2018/07/19/Java&amp;Kotlin/"/>
      <url>/2018/07/19/Java&amp;Kotlin/</url>
      <content type="html"><![CDATA[<h1 id="Kotlin-与-Java"><a href="#Kotlin-与-Java" class="headerlink" title="Kotlin 与 Java"></a>Kotlin 与 Java</h1><ul><li>在 2017 谷歌 I/O 开发者大会上，谷歌宣布 Kotlin 语言和 Java 一样，成为 Android 应用开发的一级语言。从此，这门由位于俄罗斯的 JetBrain 团队开发的语言开始广受瞩目。</li><li>Kotlin 有着简洁的语法，同时可以与 Java 很方便地进行互操作。另外，基于 Android Studio 对它的良好支持，不难看出 Google 在向外界证明 Kotlin 在 Android 应用程序开发中的地位。 2018 年的 Google  I / O 继续安排了 Kotlin 专题，也更加验证了这一点。</li><li>从 2017 到现在（2018 年中），无论是开发者还是企业，对 Kotlin 的需求都呈指数增长。根据一份对全球范围的移动应用开发者的调查显示，有百分之二十在 Google I / O 2017 大会之前使用 Java 构建的应用程序后续都迁移到了 Kotlin，这一趋势也引发了市场上对 Kotlin 开发者的需求激增。</li><li>本文将会为你介绍 14 个从 Java 迁移到 Kotlin 的 App，但在此之前，我们先来看下选择 Kotlin 可以为你带来哪些优势。<h2 id="Kotlin-的优势"><a href="#Kotlin-的优势" class="headerlink" title="Kotlin 的优势"></a><code>Kotlin 的优势</code></h2><ol><li>提升代码的可维护性，节省开发时间<br>Kotlin 比 Java 更简洁，大大减少了代码的数量。这意味着它可以用更少的代码行解决更多问题，工程师也可以更高效地阅读和修改代码。<br>相比 Java，Kotlin 提供了许多使语言更简洁的特性，比如智能转换、数据类、属性和类型接口。</li><li>降低应用程序的崩溃率<br>Kotlin 的代码比 Java 更安全，因为它在设计上避免了常见的编程错误，从而减少了应用程序崩溃和系统故障。此外，由于 Kotlin 是快速失败机制，因此可以立即报告任何可能导致失败的问题。而且，Kotlin 附带的快速失败编译器会搜索错误并阻止它们再次出现。</li><li>大大缩小代码量，让项目更易维护<br>与 Java 相比，使用 Kotlin 开发需要的代码行数量要少得多，这不仅可以节省开发时间，还可以节省应用程序维护精力。<br>除了这些商业利益之外，Kotlin 还有许多优势。</li></ol></li></ul><p>推荐《快速上手 Kotlin 开发》课程，帮助 Java/Android 开发者高效掌握 Kotlin 语言关键要点。</p><h2 id="从-Java-到-Kotlin-的好处与优势具体来说有以下几点："><a href="#从-Java-到-Kotlin-的好处与优势具体来说有以下几点：" class="headerlink" title="从 Java 到 Kotlin 的好处与优势具体来说有以下几点："></a><code>从 Java 到 Kotlin 的好处与优势具体来说有以下几点：</code></h2><ol><li>已被大范围采用<br>虽然 Kotlin 是一门新语言，但是已经有不少公司已经从 Java 迁移到 Kotlin。</li><li>简洁<br>相比 Java，Kotlin 非常简洁，减少了一些本来就没有那么多必要的模板代码，极大地提高了开发效率。因此，也大大降低了出错的概率，使生成的代码更安全可靠。</li><li>更好的用户体验<br>随着出 bug 概率和 App 的崩溃率大大降低，产品的稳定性会有很大提升。因此，用户在使用产品时会更加流畅，用户体验也就更好。</li><li>快速失败机制<br>这一次，谷歌为 Android 应用程序的编程语言带来了新的变化，他们让 Kotlin 有快速失败机制。快速失败的系统会立即报告任何有可能导致失败的编码问题。当问题出现时，快速失败机制会立即响应。</li><li>让开发人员更轻松<br>Kotlin 使 Android 应用开发对开发人员而言变得轻而易举。除了易于使用，还有强大的 Android 应用开发者社区的支持。<br>所有这些优势累积起来，使 Kotlin 成为“什么是 Android 应用程序的编程语言”的最佳答案。<br>Kotlin 的采用率非常高，以至于没准你常使用的某个 Android 应用就是用 Kotlin 搭建的。</li></ol><h3 id="14-个使用-Kotlin-的-App"><a href="#14-个使用-Kotlin-的-App" class="headerlink" title="14 个使用 Kotlin 的 App"></a><code>14 个使用 Kotlin 的 App</code></h3><p>这 14 个 App，都是用 Kotlin 开发的。</p><ol><li>Pinterest<br>Pinterest 是美国的一个图片分享类社交网站，Pinterest（Pin+Interest），意为把自己感兴趣的东西用图钉钉在钉板（PinBoard）上，用户可以按主题添加和管理自己的图片收藏，并与好友分享。Pinterest 是著名的使用 Kotlin 进行开发的 App 之一。该品牌正式从 Java 迁至 Kotlin，并在 Droidcon NYC 2016 上展示了此举的好处。</li><li>Gradle<br>Gradle 是一个基于 Apache Ant 和 Apache Maven 概念的项目自动化构建工具。最近，Gradle 将 Kotlin 作为编写构建脚本的语言。Kotlin 同时支持 IDEA 和 Eclipse，同时为 Gradle 用户提供了从代码重构到自动补全等一系列完整的 IDE 支持。<br>3.Evernote（印象笔记）<br>印象笔记是一款多功能笔记类应用笔记，在其 Android 客户端中集成了 Kotlin。<br>4.Corda<br>Corda 是一个开源区块链项目，它帮助区块链开发人员创建可互操作的区块链网络，完全基于 Kotlin 开发。</li><li>Coursera<br>这个全球知名的在线课程 App 也部分基于 Kotlin。Coursera 与全球一流大学和机构合作提供在线课程，数百万的活跃用户在该平台学习不同主题的课程。<br>6.Uber（优步）<br>优步使用 Kotlin 进行内部工具处理，例如注解处理器和 gradle 插件。<br>7.Pivotal 公司的 Spring 框架<br>大多数人可能不熟悉 Pivotal 公司。但如果你是一个开发者，在 Java 后台开发使用最多的一个框架——Spring，就是由 Pivotal 开发的。Spring 框架使用 Kotlin 为开发者提供了更简洁的 API。</li><li>Atlassian | Trello<br>Trello 是一个方便的团队协作工具，2017 年被 Atlassian 收购。虽然 Trello 不打算对旧代码库进行转换，但他们的新代码使用了 Kotlin。Java 和 Kotlin 之间有很好的互操作性，因此 Trello 能够两者兼容。</li><li>Basecamp 3<br>Basecamp 是 37signals 公司旗下的一款非常流行的基于云服务的项目管理软件。以简单易用和颠覆性的创新而出名。自从他们从 Java 转向 Kotlin 以来，Basecamp 的开发人员已经认识到代码质量和开发速度的巨大差异。</li><li>Twitter 的 Twidere<br>Twidere 是一款功能齐全的开源 Twitter 客户端，可以自定义主题、管理无限制帐户和过滤不良推文。Twidere 应用程序用 Kotlin 开发，由于其流畅的性能，已经获得了 100,000+ 的装机量。</li><li>Shadowsocks<br>安全的跨平台 socks5 代理可以帮助用户安全私密地上网。 这个在 Google Play 商店下载量超过 1,000,000 的 App 完全基于 Kotlin 开发。<br>12.Simple Calendar<br>Simple Calendar 是一款完全开源的无广告日历 App，也是完全基于 Kotlin 开发。界面非常美观，功能也很强大。</li><li><p>Kickstarter<br>Kickstarter 是世界最大的专为创意方案筹资的众筹平台，可以帮助音乐家，艺术家，设计师，电影制作人和其他创意人员筹集将他们的想法转变为现实所需的资源和支持。该应用也由 Kotlin 开发。<br>14.Square<br>自从 Square 的 Android 应用使用了 Kotlin，这个支付平台就成为了 Kotlin 的布道者。</p><p>英文原文<br><a href="https://appinventiv.com/blog/apps-migrated-from-java-to-kotlin" target="_blank" rel="noopener">https://appinventiv.com/blog/apps-migrated-from-java-to-kotlin</a></p></li></ol><p>其实，除了以上这 14 个 App，Netflix、Lyft 等知名公司已经在使用 Kotlin，可以说，2018 年，将会迎来 Kotlin 的爆发。<br>这也意味着，对于 Java 程序员和 Android 应用开发者来说，仅仅掌握 Java 是不够的，还应该学习 Kotlin，才能追上技术发展趋势，在工作中更加游刃有余。</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>项目百态</title>
      <link href="/2018/07/19/projectManagement/"/>
      <url>/2018/07/19/projectManagement/</url>
      <content type="html"><![CDATA[<p>软件项目管理面面观</p>]]></content>
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件项目管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为什么说JSON不适合做配置文件？</title>
      <link href="/2018/07/19/JsonToConfigFile/"/>
      <url>/2018/07/19/JsonToConfigFile/</url>
      <content type="html"><![CDATA[<ul><li>很多项目使用 JSON 作为配置文件，最明显的例子就是 npm 和 yarn 使用的 package.json 文件。当然，还有很多其他文件，例如 CloudFormation（最初只有 JSON，但现在也支持 YAML）和 composer（PHP）。</li><li>但是，JSON 实际上是一种非常糟糕的配置语言。别误会我的意思，我其实是喜欢 JSON 的。它是一种相对灵活的文本格式，对于机器和人类来说都很容易阅读，而且是一种非常好的数据交换和存储格式。但作为一种配置语言，它有它的不足。<h3 id="为什么流行使用-JSON-作为配置语言？"><a href="#为什么流行使用-JSON-作为配置语言？" class="headerlink" title="为什么流行使用 JSON 作为配置语言？"></a>为什么流行使用 JSON 作为配置语言？</h3>将 JSON 用作配置文件有几个方面的原因，其中最大的原因可能是它很容易实现。很多编程语言的标准库都支持 JSON，开发人员或用户可能已经很熟悉 JSON，所以不需要学习新的配置格式就可以使用那些产品。现在几乎所有的工具都提供 JSON 支持，包括语法突出显示、自动格式化、验证工具等。<br>这些都是很好的理由，但这种无处不在的格式其实不适合用作配置。</li></ul><h2 id="JSON-的问题"><a href="#JSON-的问题" class="headerlink" title="JSON 的问题"></a>JSON 的问题</h2><h4 id="1-缺乏注释"><a href="#1-缺乏注释" class="headerlink" title="1. 缺乏注释"></a>1. 缺乏注释</h4><ul><li>注释对于配置语言而言绝对是一个重要的功能。注释可用于标注不同的配置选项、解释为什么要配置成特定的值，更重要的是，在使用不同的配置进行测试和调试时需要临时注释掉部分配置。当然，如果只是把 JSON 当作是一种数据交换格式，那么就不需要用到注释。</li><li>我们可以通过一些方法给 JSON 添加注释。一种常见的方法是在对象中使用特殊的键作为注释，例如“//”或“__comment”。但是，这种语法的可读性不高，并且为了在单个对象中包含多个注释，需要为每个注释使用唯一的键。David Crockford（JSON 的发明者）建议使用预处理器来删除注释。如果你的应用程序需要使用 JSON 作为配置，那么完全没问题，不过这确实带来了一些额外的工作量。</li><li>一些 JSON 库允许将注释作为输入。例如，Ruby 的 JSON 模块和启用了 JsonParser.Feature.ALLOW_COMMENTS 功能的 Java Jackson 库可以处理 JavaScript 风格的注释。但是，这不是标准的方式，而且很多编辑器无法正确处理 JSON 文件中的注释，这让编辑它们变得更加困难。<h4 id="2-过于严格"><a href="#2-过于严格" class="headerlink" title="2. 过于严格"></a>2. 过于严格</h4></li><li>JSON 规范非常严格，这也是为什么实现 JSON 解析器会这么简单，但在我看来，它还会影响可读性，并且在较小程度上会影响可写性。<h4 id="3-低信噪比"><a href="#3-低信噪比" class="headerlink" title="3. 低信噪比"></a>3. 低信噪比</h4></li><li>与其他配置语言相比，JSON 显得非常嘈杂。JSON 的很多标点符号对可读性毫无帮助，况且，对象中的键几乎都是标识符，所以键的引号其实是多余的。</li><li>此外，JSON 需要使用花括号将整个文档包围起来，所以 JSON 是 JavaScript 的子集，并在流中发送多个对象时用于界定不同的对象。但是，对于配置文件来说，最外面的大括号其实没有任何用处。在配置文件中，键值对之间的逗号也是没有必要的。通常情况下，每行只有一个键值对，所以使用换行作为分隔符更有意义。</li><li>说到逗号，JSON 居然不允许在结尾出现逗号。如果你需要在每个键值对之后使用逗号，那么至少应该接受结尾的逗号，因为有了结尾的逗号，在添加新条目时会更容易，而且在进行 commit diff 时也更清晰。<h4 id="4-长字符串"><a href="#4-长字符串" class="headerlink" title="4. 长字符串"></a>4. 长字符串</h4></li><li>JSON 作为配置格式的另一个问题是，它不支持多行字符串。如果你想在字符串中换行，必须使用“\n”进行转义，更糟糕的是，如果你想要一个字符串在文件中另起一行显示，那就彻底没办法了。如果你的配置项里没有很长的字符串，那就不是问题。但是，如果你的配置项里包括了长字符串，例如项目描述或 GPG 密钥，你可能不希望只是使用“\n”来转义而不是使用真实的换行符。<h4 id="5-数字"><a href="#5-数字" class="headerlink" title="5. 数字"></a>5. 数字</h4></li><li>此外，在某些情况下，JSON 对数字的定义可能会有问题。JSON 规范中将数字定义成使用十进制表示的任意精度有限浮点数。对于大多数应用程序来说，这没有问题。但是，如果你需要使用十六进制表示法或表示无穷大或 NaN 等值时，那么 TOML 或 YAML 将能够更好地处理它们。<figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><br>  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"example"</span>,<br><br>  <span class="hljs-attr">"description"</span>: <span class="hljs-string">"A really long description that needs multiple lines.\nThis is a sample project to illustrate why JSON is not a good configuration format. This description is pretty long, but it doesn't have any way to go onto multiple lines."</span>,<br><br>  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"0.0.1"</span>,<br><br>  <span class="hljs-attr">"main"</span>: <span class="hljs-string">"index.js"</span>,<br><br>  <span class="hljs-attr">"//"</span>: <span class="hljs-string">"This is as close to a comment as you are going to get"</span>,<br><br>  <span class="hljs-attr">"keywords"</span>: [<span class="hljs-string">"example"</span>, <span class="hljs-string">"config"</span>],<br><br>  <span class="hljs-attr">"scripts"</span>: &#123;<br><br>    <span class="hljs-attr">"test"</span>: <span class="hljs-string">"./test.sh"</span>,<br><br>    <span class="hljs-attr">"do_stuff"</span>: <span class="hljs-string">"./do_stuff.sh"</span><br><br>  &#125;,<br><br>  <span class="hljs-attr">"bugs"</span>: &#123;<br><br>    <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://example.com/bugs"</span><br><br>  &#125;,<br><br>  <span class="hljs-attr">"contributors"</span>: [&#123;<br><br>    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"John Doe"</span>,<br><br>    <span class="hljs-attr">"email"</span>: <span class="hljs-string">"johndoe@example.com"</span><br><br>  &#125;, &#123;<br><br>    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Ivy Lane"</span>,<br><br>    <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://example.com/ivylane"</span><br><br>  &#125;],<br><br>  <span class="hljs-attr">"dependencies"</span>: &#123;<br><br>    <span class="hljs-attr">"dep1"</span>: <span class="hljs-string">"^1.0.0"</span>,<br><br>    <span class="hljs-attr">"dep2"</span>: <span class="hljs-string">"3.40"</span>,<br><br>    <span class="hljs-attr">"dep3"</span>: <span class="hljs-string">"6.7"</span><br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="JSON-的替代方案"><a href="#JSON-的替代方案" class="headerlink" title="JSON 的替代方案"></a>JSON 的替代方案</h2><ul><li>选择哪一种配置语言取决于你的应用程序。每种语言都有各自的优缺点，下面列出了一些可以考虑的选项。它们都是为配置而设计的语言，每一种都比 JSON 这样的数据语言更好。<h4 id="HJSON"><a href="#HJSON" class="headerlink" title="HJSON"></a>HJSON</h4></li><li>HJSON 是一种基于 JSON 的格式，但具有更大的灵活性，可读性也更强。它支持注释、多行字符串、不带引号的键和字符串，以及可选的逗号。如果你想要 JSON 结构的简单性，同时对配置文件更友好，那么可以考虑 HJSON。有一些可以将 HJSON 转换为 JSON 的命令行工具，如果你使用的工具是基于 JSON 的，可以先用 HJSON 编写配置，然后再转换成 JSON。JSON5 是另一个与 HJSON 非常相似的配置语言。<figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  name: example<br>  description: '''<br>  A really long description that needs multiple lines.<br>  This is a sample project to illustrate why JSON is<br>  not a good configuration format.  This description<br>  is pretty long, but it doesn't have any way to go<br>  onto multiple lines.<br>  '''<br>  version: 0.0.1<br>  main: index.js<br>  # This is a a comment<br>  keywords: ["example", "config"]<br>  scripts: &#123;<br>    test: ./test.sh<br>    do_stuff: ./do_stuff.sh<br>  &#125;<br>  bugs: &#123;<br>    url: https://example.com/bugs<br>  &#125;<br>  contributors: [&#123;<br>    name: John Doe<br>    email: johndoe@example.com<br>  &#125; &#123;<br>    name: Ivy Lane<br>    url: https://example.com/ivylane<br>  &#125;]<br><br>  dependencies: &#123;<br>    dep1: ^1.0.0<br>    # Why we have this dependency<br>    dep2: "3.40"<br>    dep3: "6.7"<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="HOCON"><a href="#HOCON" class="headerlink" title="HOCON"></a>HOCON</h4><ul><li>HOCON 是为 Play 框架设计的配置格式，在 Scala 项目中非常流行。它是 JSON 的超集，因此可以使用现有的 JSON 文件。除了注释、可选逗号和多行字符串这些标准特性外，HOCON 还支持从其他文件导入和引用其他值的键，避免重复代码，并使用以点作为分隔符的键来指定值的路径，因此用户可以不必将所有值直接放在花括号对象中。</li></ul><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>name = example<br>description = """<br>A really long description that needs multiple lines.<br>This is a sample project to illustrate why JSON is<br>not a good configuration format.  This description<br>is pretty long, but it doesn't have any way to go<br>onto multiple lines.<br>"""<br>version = 0.0.1<br>main = index.js<br> This is a a comment<br>keywords = ["example", "config"]<br>scripts &#123;<br>  test = ./test.sh<br>  do_stuff = ./do_stuff.sh<br>&#125;<br>bugs.url = "https://example.com/bugs"<br><br>contributors = [&#123;<br>    name = John Doe<br>    email = johndoe@example.com<br>  &#125;&#123;<br>    name = Ivy Lane<br>    url = "https://example.com/ivylane"<br>  &#125;]<br><br>dependencies &#123;<br>  dep1 = ^1.0.0<br>   Why we have this dependency<br>  dep2 = "3.40"<br>  dep3 = "6.7"<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h4><ul><li>YAML（YAML 不是标记语言）是一种非常灵活的格式，几乎是 JSON 的超集，已经被用在一些著名的项目中，如 Travis CI、Circle CI 和 AWS CloudFormation。YAML 的库几乎和 JSON 一样无处不在。除了支持注释、换行符分隔、多行字符串、裸字符串和更灵活的类型系统之外，YAML 也支持引用文件，以避免重复代码。</li><li>YAML 的主要缺点是规范非常复杂，不同的实现之间可能存在不一致的情况。它将缩进视为严格语法的一部分（类似于 Python），有些人喜欢，有些人不喜欢。这会让复制和粘贴变得很麻烦。<figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">example</span><br><br><span class="hljs-attr">description:</span> <span class="hljs-string">&gt;<br><br>  A really long description that needs multiple lines.<br><br>  This is a sample project to illustrate why JSON is not a good<br><br>  configuration format. This description is pretty long, but it<br><br>  doesn't have any way to go onto multiple lines.<br><br></span><span class="hljs-attr">version:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.1</span><br><br><span class="hljs-attr">main:</span> <span class="hljs-string">index.js</span><br><br><span class="hljs-comment"># this is a comment</span><br><br><span class="hljs-attr">keywords:</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">example</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">config</span><br><br><span class="hljs-attr">scripts:</span><br><span class="hljs-attr">  test:</span> <span class="hljs-string">./test.sh</span><br><span class="hljs-attr">  do_stuff:</span> <span class="hljs-string">./do_stuff.sh</span><br><br><span class="hljs-attr">bugs:</span><br><span class="hljs-attr">  url:</span> <span class="hljs-string">"https://example.com/bugs"</span><br><br><span class="hljs-attr">contributors:</span><br><span class="hljs-attr">  - name:</span> <span class="hljs-string">John</span> <span class="hljs-string">Doe</span><br><span class="hljs-attr">    email:</span> <span class="hljs-string">johndoe@example.com</span><br><span class="hljs-attr">  - name:</span> <span class="hljs-string">Ivy</span> <span class="hljs-string">Lane</span><br><span class="hljs-attr">    url:</span> <span class="hljs-string">"https://example.com/ivylange"</span><br><br><span class="hljs-attr">dependencies:</span><br><span class="hljs-attr">  dep1:</span> <span class="hljs-string">^1.0.0</span><br><span class="hljs-attr">  dep2:</span> <span class="hljs-string">"3.40"</span><br><span class="hljs-attr">  dep3:</span> <span class="hljs-string">"6.7"</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h4><ul><li>如果你的应用程序是使用 Python 或 Ruby 等脚本语言开发的，并且你知道配置的来源是可靠的，那么最好的选择可能就是使用这些语言进行配置。如果你需要一个真正灵活的配置选项，也可以在编译语言中嵌入诸如 Lua 之类的脚本语言。这样可以获得脚本语言的灵活性，而且比使用不同的配置语言更容易实现。使用脚本语言的缺点是它可能过于强大，当然，如果配置来源是不受信任的，可能会引入严重的安全问题。</li></ul><h4 id="自定义配置格式"><a href="#自定义配置格式" class="headerlink" title="自定义配置格式"></a>自定义配置格式</h4><ul><li>如果由于某种原因，键值配置格式不能满足你的要求，并且由于性能或大小限制而无法使用脚本语言，那么可以考虑自定义配置格式。如果是这种情况，那么在做出选择之前要想清楚，因为你不仅要编写和维护一个解析器，还要让你的用户熟悉另一种配置格式。</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>有了这么多更好的配置语言，没有理由还要使用 JSON。如果要创建需要用到配置的新应用程序、框架或库，请选择 JSON 以外的其他选项。</li><li>英文原文：<a href="https://www.lucidchart.com/techblog/2018/07/16/why-json-isnt-a-good-configuration-language/" target="_blank" rel="noopener">https://www.lucidchart.com/techblog/2018/07/16/why-json-isnt-a-good-configuration-language/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java技术栈</title>
      <link href="/2018/07/19/JavaArch/"/>
      <url>/2018/07/19/JavaArch/</url>
      <content type="html"><![CDATA[<h1 id="作为Java技术栈的工程师，这些，你都会了么？"><a href="#作为Java技术栈的工程师，这些，你都会了么？" class="headerlink" title="作为Java技术栈的工程师，这些，你都会了么？"></a>作为Java技术栈的工程师，这些，你都会了么？</h1><ol><li><p>深入Spring 5与设计模式<br>(1)Spring 5实践<br>(2)IOC<br>(3)AOP<br>(4)常见设计模式</p></li><li><p>深入WebMVC开发<br>(1)Http与Sevlet实践<br>(2)Servlet编程模型<br>(3)MVC原理与实现<br>(4)高级Filter开发实践<br>(5)Stateless架构设计<br>(6)SpringMVC开发与实践<br>(7)SpringBoot开发与实践<br>(8)API设计与实践</p></li><li><p>深入数据架构设计<br>(1)Spring JDBC与MySQL实践<br>(2)ORM与Hibernate实践<br>(2)Spring事务实践<br>(3)MySQL主从，分页优化<br>(4)分布式事务实践<br>(5)NoSQL实践</p></li><li><p>深入响应式Web开发<br>(1)Reactive实践<br>(2)Netty极其应用<br>(3)SpringWebFlux开发与Websocket<br>(4)客户端socket.io</p></li><li><p>深入分布式架构设计<br>(1)服务治理，服务注册与发现<br>(2)配置中心<br>(3)Hystrix，客户端路由，服务降级<br>(4)本地缓存，分布式缓存<br>(5)异步驱动，JMS，Queue<br>(6)消息服务，RabbitMQ/Kafka<br>(7)幂等性消息设计<br>(8)流控，熔断，反向代理，限速</p></li><li><p>应用与实战<br>(1)Sprint Cloud应用实战<br>(2)Docker应用实战<br>(3)微服务应用实战<br>(4)分布式运维实战<br>(5)性能与调优实战</p></li></ol>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
